#!/usr/bin/env bash

set -eou pipefail

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

nj=16
stage=-1
stop_stage=3

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/aishell
#      You can download aishell from https://www.openslr.org/33/
#

dl_dir=$PWD/egs/wenet_speech/download

dataset_parts="-pL -pM -pS -pDEV -pTEST_MEETING -pTEST_NET"  # debug
# dataset_parts="-p test" 

text_extractor=""
audio_extractor="Encodec"  # or Fbank
audio_feats_dir="egs/wenet_speech/data/tokenized"

. egs/wenet_speech/shared/parse_options.sh || exit 1


# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p egs/wenet_speech/data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}


if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 1: Prepare wenet_speech manifest"
  # We assume that you have downloaded the aishell corpus
  # to $dl_dir/aishell
  mkdir -p egs/wenet_speech/data/manifests
  if [ ! -e egs/wenet_speech/data/manifests/.wenet_speech.done ]; then
    lhotse prepare wenet-speech $dl_dir/wenet_speech egs/wenet_speech/data/manifests --num-jobs=5
    touch egs/wenet_speech/data/manifests/.wenet_speech.done
  fi
fi


if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 2: Tokenize/Fbank wenet_speech"
  mkdir -p ${audio_feats_dir}
  if [ ! -e ${audio_feats_dir}/.wenet_speech.tokenize.done ]; then
    python3 bin/tokenizer.py --dataset-parts "${dataset_parts}" \
        --audio-extractor ${audio_extractor} \
        --batch-duration 400 \
        --prefix wenetspeech\
        --src-dir "egs/wenet_speech/data/manifests" \
        --output-dir "${audio_feats_dir}" \
	--num-jobs 3 \
	--device 'cpu'
  fi
  touch ${audio_feats_dir}/.wenet_speech.tokenize.done
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 3: Prepare wenet_speech train/dev/test"
  if [ ! -e ${audio_feats_dir}/.wenet_speech.train.done ]; then
    if [ "${dataset_parts}" == "--dataset-parts all" ];then
      # train
      lhotse combine \
        ${audio_feats_dir}/wenetspeech_cuts_L.jsonl.gz \
        ${audio_feats_dir}/wenetspeech_cuts_M.jsonl.gz \
        ${audio_feats_dir}/wenetspeech_cuts_S.jsonl.gz \
        ${audio_feats_dir}/cuts_train.jsonl.gz

      # dev
      lhotse copy \
        ${audio_feats_dir}/wenetspeech_cuts_DEV.jsonl.gz \
        ${audio_feats_dir}/cuts_dev.jsonl.gz
    else  # debug
      # train
      lhotse copy \
        ${audio_feats_dir}/wenetspeech_cuts_DEV.jsonl.gz \
        ${audio_feats_dir}/cuts_train.jsonl.gz
      # dev
      lhotse subset --first 400 \
        ${audio_feats_dir}/wenetspeech_cuts_TEST_NET.jsonl.gz \
        ${audio_feats_dir}/cuts_dev.jsonl.gz
    fi

    # test
    lhotse copy \
      ${audio_feats_dir}/wenetspeech_cuts_TEST_MEETING.jsonl.gz \
      ${audio_feats_dir}/cuts_test.jsonl.gz

    touch ${audio_feats_dir}/.wenet_speech.train.done
  fi
fi

python3 ./bin/display_manifest_statistics.py --manifest-dir ${audio_feats_dir}
